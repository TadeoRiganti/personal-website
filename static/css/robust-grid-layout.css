.main-grid {
    /* MASTER CONTROL:
       Sets the number of columns */
    --column-count: 6;
    display: grid;
    column-gap: 1rem;
    /*                                 Acts as a pseudo container
                                                    ↓                         */
    /* grid-template-columns: minmax(1rem,1fr) minmax(0, 60rem) minmax(1rem,1fr); */

    /*                                   Divide container into 6 columns
                                                   ↓                                   */
    grid-template-columns: minmax(1rem,1fr) repeat(var(--column-count), minmax(0, 10rem)) minmax(1rem,1fr);
}

/* Acts as a full container */
.main-grid > * {
    grid-column: 1 / -1;

    display: grid;
    grid-template-columns: subgrid;
}

/* keeps the content centered, when the layout breaks */
@media (max-width: 650px) {
    .main-grid > * > * {
    grid-column: 2 / -2;
    }
}

@media (min-width: 650px) {
    .even-columns > * {
        grid-column: span var(--column-width);
    }

    /* The following pair makes the sides (pseudo-padding) to not be counted */
    .even-columns > *:first-child {
        grid-column: var(--column-start, 2) / span var(--column-width);
    }

    .even-columns > *:last-child {
        grid-column: span var(--column-width) / calc(var(--column-start, 2) * -1);
    }

    .two-columns {
        --column-width: calc(var(--column-count) / 2);
    }


    .three-columns {
        --column-width: calc(var(--column-count) / 3);
    }

    /* Examples for soime asymetrical rules positioning */
    .hero__title {
        grid-row: 1 / 2;
        grid-column: 2 / 7;
        z-index: 2;
    }

    .hero_img {
        grid-row: 1 / span 2;
        grid-column: 5 / 8;
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .hero {
        padding: 3em 0;
    }

    .hero__body {
        grid-row: 2;
        grid-column: 2 / 4;
    }
}
/* This works as an example of customization
   In this case, by changing column-start by 3, we changing the span
   in this section alone */
   /* But if you find it's a repetitive pattern then you could change the identificator
   to a "utilitary" class (for example; ".narrow"). */
.more-stuff {
    --column-width: 2;
    --column-start: 3;
}

.cta {
    --column-width: 4;
    --column-start: 3;
}

.full-split {
    gap: 0;
}

.full-split > * {
    --column-width: 4;
    --column-start: 1;
    grid-column: 1 / -1;
}

.full-split > img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

/* The following pair are an example of utilitarian classes */
.bg-dark {
    background-color: black;
    color: white;
}

.p-3 {
    padding: 3rem;
}




/* // General */

body {
    font-family: "Work Sans", sans-serif;
    line-height: 1.6;
    font-size: 1.125rem;
  }
  img {
    display: block;
    max-width: 100%;
  }
  .btn {
    cursor: pointer;
    text-decoration: none;
    text-transform: uppercase;
    background: black;
    color: white;
    padding: 0.75em 2em;
    border-radius: 100vmax;
  
    &:hover {
      background: #444;
    }
  }


  
  /* // Typography */
  
  .main__title {
    font-size: 5rem;
    text-transform: uppercase;
    line-height: 0.9;
    margin-bottom: 0.2em;
  }
  
  h2 {
    font-size: 2rem;
    line-height: 0.9;
    text-transform: uppercase;
  
  
    span {
      font-weight: 300;
      display: block;
    }
  }
  
  .hero {
    padding-bottom: 3em;
  }
  
  .sales-points {
    padding: 3rem 0;
    background: #efefef;
    text-align: center;
  }
  
  .more-stuff {
    text-align: center;
    --col-start: 3;
    --col-size: 2;
    padding: 3rem 0;
  }
  
  
  .cta {
    background: #222;
    padding: 3em 0;
    text-align: center;
    color: #f4f4f4;
    column-gap: 1em;
  }
  
  
  .v-center {
    display: grid;
    align-items: center;
    margin: 0;
  }
  